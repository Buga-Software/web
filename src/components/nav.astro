---
const items = [
  { label: 'Servicios', href: '/services' },
  { label: 'Proyectos', href: '/proyects' },
  { label: 'Clientes', href: '/clients' },
  { label: 'Contacto', href: '/contact' },
];
---

<nav id="navbar" class="sticky top-0 z-50 px-12 md:px-24 py-6 w-full flex justify-between items-center transition-all duration-300 ease-in-out">
  <a href="/">
    <img class="aspect-square w-6" src="icon.svg" alt="Icono de Buga Software">
  </a>

  <!-- burger menu -->
  <button id="burger-btn" class="md:hidden text-white p-3 hover:cursor-pointer">
    <svg class="size-7" viewBox="0 0 16 16" fill="currentColor">
      <rect class="transition-transform duration-300 ease-in-out origin-center" x="1" y="5" width="14" height="1" rx="0.5"></rect>
      <rect class="transition-transform duration-300 ease-in-out origin-center" x="1" y="10" width="14" height="1" rx="0.5"></rect>
    </svg>
  </button>

  <!-- desktop -->
  <div class="hidden md:flex space-x-4 text-white font-medium monospace">
    {items.map(({ label, href }, index) => (
      <a
        href={href}
        class={`inline-block rounded-lg px-5 py-1 transition-colors duration-300 ${
          index + 1 == items.length
            ? 'bg-white text-black border-2 border-transparent hover:opacity-80 transition-opacity duration-100'
            : 'hover:bg-white/15'
        }`}
      >
        {label}
      </a>
    ))}
  </div>
</nav>

<!-- mobile -->
<div class="relative mobile-nav hidden md:hidden monospace">
  <div class="fixed top-0 left-0 w-full h-screen bg-black/90 backdrop-blur-md z-40 text-white/60 flex flex-col justify-between items-center p-10">
    <ul class="flex flex-col space-y-5 text-xl text-center font-medium mt-20">
      {items.map(({ label, href }) => (
        <li class="hover:text-white transition-colors duration-150">
          <a href={href}>{label}</a>
        </li>
      ))}
    </ul>
  </div>
</div>

<style>
  /* Estado inicial del navbar */
  #navbar {
    background: rgba(0, 0, 0, 0);
    backdrop-filter: blur(0px);
  }
  
  /* Estado cuando est√° scrolleado */
  #navbar.scrolled {
    background: rgba(18, 18, 18, 0.186);
    backdrop-filter: blur(12px);
  }
  
  /* Soporte para navegadores webkit */
  #navbar.scrolled {
    -webkit-backdrop-filter: blur(12px);
  }
</style>

<script lang="ts">
  const button = document.getElementById('burger-btn')
  const nav = document.querySelector('.mobile-nav')
  const body = document.body
  const line = button?.querySelectorAll('rect')
  const navbar = document.getElementById('navbar')

  button?.addEventListener('click', () => {
    nav?.classList.toggle('hidden')
    body?.classList.toggle('overflow-hidden')

    if (line) {
      line[0].classList.toggle('rotate-45')
      line[0].classList.toggle('translate-y-[1.8px]')
      line[1].classList.toggle('-rotate-45')
      line[1].classList.toggle('-translate-y-[1.8px]')
    }
  })

  let lastScrollY = window.scrollY
  
  function updateNavbar() {
    const currentScrollY = window.scrollY
    
    if (navbar) {
      if (currentScrollY > 50) {
        navbar.classList.add('scrolled')
      } else {
        navbar.classList.remove('scrolled')
      }
    }
    
    lastScrollY = currentScrollY
  }

  let ticking = false
  
  function requestTick() {
    if (!ticking) {
      requestAnimationFrame(updateNavbar)
      ticking = true
      setTimeout(() => { ticking = false }, 10)
    }
  }

  window.addEventListener('scroll', requestTick)

  document.querySelectorAll('.mobile-nav a').forEach(link => {
    link.addEventListener('click', () => {
      nav?.classList.add('hidden')
      body?.classList.remove('overflow-hidden')
      
      if (line) {
        line[0].classList.remove('rotate-45', 'translate-y-[1.8px]')
        line[1].classList.remove('-rotate-45', '-translate-y-[1.8px]')
      }
    })
  })
</script>
